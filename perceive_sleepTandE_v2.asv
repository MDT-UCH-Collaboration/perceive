function [outMAT] = perceive_sleepTandE_v2(inPS)
% Github https://github.com/MDT-UCH-Collaboration

arguments
    inPS.userPC (1,1) string = "JATwork"
    inPS.subID (1,1) double = 1 % IN USE for CASE NUMBER
    inPS.postN (1,1) double = 1
    inPS.userDIR (1,1) string = "NA"
    inPS.seluDIR (1,1) logical = true
    inPS.saveDIR (1,1) string = "NA"
    inPS.selsDIR (1,1) logical = true
    inPS.stagE (1,1) double = 1
    inPS.studY (1,:) char = '20-2508'
    inPS.pltCl (1,1) logical = 0
end

%% OUTPUT
% The script generates BIDS inspired subject and session folders with the

%% TODO:
% 1. Remove less than zero from final LFP output
% 2. Figure what to output in CSV - long view (vs wide view)
%

if inPS.seluDIR && strcmp(inPS.userDIR,"NA")
    [fileDIR] = uigetdir();
else
    fileDIR = inPS.userDIR;
end

if inPS.selsDIR && strcmp(inPS.saveDIR,"NA")
    [saveLOC] = uigetdir();
else
    saveLOC = inPS.saveDIR;
end
sessionFields = {'SessionDate','SessionEndDate','PatientInformation'};

cd(fileDIR)
initDir = dir('*.json');
jsonFiles = {initDir.name};

[indx,~] = listdlg('PromptString',{'Select a file.',...
    'Only one file can be selected at a time.',''},...
    'SelectionMode','single','ListString',jsonFiles);

json2load = jsonFiles{indx};

js = jsondecode(fileread(json2load));

% Tzoffset
tzOFF = js.ProgrammerUtcOffset;
tzOffs = strsplit(tzOFF,':');
tzOffsN = str2double(tzOffs{1});

switch inPS.stagE
    case 1 % Events
        infoFields = {'PatientEvents','EventSummary','DiagnosticData'};
        js.DiagnosticData.LfpFrequencySnapshotEvents
        dataOfInterest = js.(infoFields{3});
        
        % Struct
        % Level 1
        % - Type of event
        % Level 2
        % -- Event start time
        % -- Matrix of FFT [column = event #, row = sample #]
        % -- Matrix of STim [column = event #, row = sample #]
        % -- Matrix of LFPmag [column = event #, row = sample #]
        
        allEvents = cell(length(dataOfInterest.LfpFrequencySnapshotEvents),1);
        
        for ae = 1:length(allEvents)
            allEvents{ae} = dataOfInterest.LfpFrequencySnapshotEvents{ae,1}.EventName;
        end
        
        allEventsS = cellfun(@(x) replace(x,' ',''), allEvents, 'UniformOutput',false);
        
        uniEVENTS = unique(allEventsS);
        
        outEVENTS = struct;
        for oi = 1:length(uniEVENTS)
            outEVENTS.(uniEVENTS{oi}).count = 1;
        end
        
        for di = 1:length(dataOfInterest.LfpFrequencySnapshotEvents)
            
            tmpDat = dataOfInterest.LfpFrequencySnapshotEvents{di,1};
            
            tEvent = tmpDat.EventName;
            tEventS = replace(tEvent,' ','');
            tIND = ismember(uniEVENTS,tEventS);
            
            inCount = outEVENTS.(uniEVENTS{tIND}).count;
            
            if ~isfield(tmpDat,'LfpFrequencySnapshotEvents')
                continue
            end
            
            outEVENTS.(uniEVENTS{tIND}).DateTime{inCount,1} = tmpDat.DateTime;
            
            lfpDAT = tmpDat.LfpFrequencySnapshotEvents.HemisphereLocationDef_Left;
            
            outEVENTS.(uniEVENTS{tIND}).FFTBinData(:,inCount) = lfpDAT.FFTBinData;
            outEVENTS.(uniEVENTS{tIND}).Frequency(:,inCount) = lfpDAT.Frequency;
            
            outEVENTS.(uniEVENTS{tIND}).count = inCount + 1;
            
        end
        
        % Clean up struct
        for ci = 1:length(uniEVENTS)
            outEVENTS.(uniEVENTS{ci}) = rmfield(outEVENTS.(uniEVENTS{ci}),'count');
        end
        
        % Save mat file
        cd(saveLOC)
        fileNAMEm = ['SPPD',num2str(inPS.subID),'_Events.mat'];
        save(fileNAMEm,'outEVENTS');
        
        % Save Excel file 
        outTableE = table;
        for ci = 1:length(uniEVENTS)
            % Time
            timeAll = cell(length(outEVENTS.(uniEVENTS{ci}).DateTime)*100,1);
            for ti = 1:length(outEVENTS.(uniEVENTS{ci}).DateTime)
               timeAll(1:100,ti) = repmat(outEVENTS.(uniEVENTS{ci}).DateTime(ti),100,1); 
            end
            
            outTableE.([outEVENTS.(uniEVENTS{ci}),'Time']) = timeAll;
            % FFT
            outTableE.([outEVENTS.(uniEVENTS{ci}),'FFT']) = outEVENTS.(uniEVENTS{ci}).FFTBinData(:);
            % Frequency
            outTableE.([outEVENTS.(uniEVENTS{ci}),'Freq']) = outEVENTS.(uniEVENTS{ci}).Frequency(:);
        end
        
        cd(saveLOC)
        fileNAME = ['SPPD',num2str(inPS.subID),'_Events.csv'];
        writetable(outTableE,fileNAME);
        
        
    case 2 % Timeline
        infoFields = {'DiagnosticData'};
        
        dataOfInterest = js.(infoFields{1});
        
        lfpDAys = dataOfInterest.LFPTrendLogs.HemisphereLocationDef_Left;
        
        lfpDayNames = fieldnames(lfpDAys);
        
        monthS = zeros(144,length(lfpDayNames));
        dayS = zeros(144,length(lfpDayNames));
        hourS = nan(144,length(lfpDayNames));
        minuteS = nan(144,length(lfpDayNames));
        actDAYtm = NaT(144,length(lfpDayNames));
        LFPall = zeros(144,length(lfpDayNames));
        stimAll = zeros(144,length(lfpDayNames));
        timXax = [];
        
        for li = 1:length(lfpDayNames)
            
            tLFP = transpose(fliplr([lfpDAys.(lfpDayNames{li}).LFP]));
            tstim_mA = transpose(fliplr([lfpDAys.(lfpDayNames{li}).AmplitudeInMilliAmps]));
            timeD = transpose(fliplr({lfpDAys.(lfpDayNames{li}).DateTime}));
            
            [monthOI,dayOI,hourOI,minuteOI,actDayT] = getDT(timeD , tzOffsN);
            
            % convert minute column to floor round
            minuteOIc = floor(minuteOI/10)*10;
            % combine hour , minute , second
            durFind = duration(hourOI,minuteOIc,zeros(length(minuteOIc),1));
            
            % search for where to align times;
            [alignIND , allBlok] = alignTime(durFind);
            
            monthS(alignIND,li) = monthOI;
            dayS(alignIND,li) = dayOI;
            hourS(alignIND,li) = hourOI;
            minuteS(alignIND,li) = minuteOI;
            actDAYtm(alignIND,li) = actDayT;
            LFPall(alignIND,li) = tLFP;
            stimAll(alignIND,li) = tstim_mA;
            timXax = allBlok;
            
        end
        
        % Save out CSV file with timeline data
        % Month, Day, Hour, Minute, LFP mag, stimMA, actDayTime
        LFPallf = LFPall;
        LFPallf(LFPall > 7000) = 7000;
        
        % Fix outliers by removing and smooth
        [LFPallfm] = fixOutSm(LFPallf);
        
        % Smooth
        LFPallfSm = smoothdata(LFPallfm,1,'sgolay',6);
        
        % Tall Table
        actDAYcol = reshape(actDAYtm,numel(actDAYtm),1);
        monCOL = reshape(monthS,numel(monthS),1);
        dayCOL = reshape(dayS,numel(dayS),1);
        hourCOL = reshape(hourS,numel(hourS),1);
        minCOL = reshape(minuteS,numel(minuteS),1);
        %         minMapCOL = reshape(actDAYtm,numel(actDAYtm),1);
        LFPaCOL = reshape(LFPallfSm,numel(LFPallfSm),1);
        stimCOL = reshape(stimAll,numel(stimAll),1);
        
        %         timeCOL = repmat(minuteOIc,144*size(hourCOL,2),1);
        %         timeMAT = repmat(minuteOIc,1,size(hourCOL,2));
        
        % Remove smooth added edge data
        nanMin = isnan(minCOL);
        LFPaCOL(nanMin) = 0;
        
        % OutTable
        outTable = table(actDAYcol,monCOL,dayCOL,hourCOL,minCOL,LFPaCOL,stimCOL,...
            'VariableNames',{'FullDate','Month','Day','Hour','Minute',...
            'LFP_Mag','Stim_mA'});
        
        %         nanMin = isnan(outTable.Minute);
        %         outTable.LFP_Mag(nanMin) = 0;
        
        cd(saveLOC)
        fileNAME = ['SPPD',num2str(inPS.subID),'_TimeLine.csv'];
        writetable(outTable,fileNAME);
        
        LFPaMAT = reshape(LFPaCOL,144,size(hourS,2));
        
        outMAT.actTime = actDAYtm;
        outMAT.month = monthS;
        outMAT.day = dayS;
        outMAT.hour = hourS;
        outMAT.minu = minuteS;
        outMAT.LFP = LFPaMAT;
        outMAT.Stim = stimAll;
        outMAT.TimeX = cellstr(datestr(timXax));
        
        fileNAMEm = ['SPPD',num2str(inPS.subID),'_TimeLine.mat'];
        save(fileNAMEm,'outMAT');
        
        
end



end % End of Function




function [monthOI,dayOI,hourOI,minuteOI,actDayT] = getDT(timeVEC , tzOFFtm)

monthOI = zeros(length(timeVEC),1);
dayOI = zeros(length(timeVEC),1);
hourOI = zeros(length(timeVEC),1);
minuteOI = zeros(length(timeVEC),1);
actDayT = NaT(length(timeVEC),1);

for ti = 1:length(timeVEC)
    
    tmpT = timeVEC{ti};
    tmpTT = datetime(replace(tmpT,{'T','Z'},{' ',''}));
    
    actDayT(ti) = tmpTT + hours(tzOFFtm);
    monthOI(ti) = actDayT(ti).Month;
    dayOI(ti) = actDayT(ti).Day;
    hourOI(ti) = actDayT(ti).Hour;
    minuteOI(ti) = actDayT(ti).Minute;
    
end

end



function [alignIND , allBlock] = alignTime(inTIME)

AMblock1 = duration(6,00,0);
AMblock2 = duration(23,50,0);

PMblock1 = duration(0,00,0);
PMblock2 = duration(5,50,0);

amBlock = linspace(AMblock1,AMblock2,108);
pmBlock = linspace(PMblock1,PMblock2,36);

% Start at 6 AM
allBlock = [transpose(amBlock) ; transpose(pmBlock)];

% Search through inTIME and line up with allBlock indicies in alignIND
% Check on the 143 and 50 file.

alignIND = zeros(size(inTIME));
for iT = 1:length(inTIME)
    
    % Input time row
    tTime = inTIME(iT);
    
    % Find where located in allBlock
    tIND  = find(ismember(allBlock,tTime));
    
    % Store in alignIND
    alignIND(iT) = tIND;
    
end

end


function [outSmooth] = fixOutSm(inUNvec)


outSmooth = inUNvec;
for si = 1:size(inUNvec,2)
    
    tmpVEC = inUNvec(:,si);
    tmpVECz = tmpVEC(tmpVEC ~= 0);
    
    tmpM = mean(tmpVECz);
    tmpS = std(tmpVECz);
    
    tmpTH = tmpM + (tmpS*2);
    
    abovEInd = find(tmpVEC > tmpTH);
    allNUMS = 1:144;
    remAbov = ~ismember(allNUMS,abovEInd);
    
    for ai = 1:length(abovEInd)
        tmpAi = abovEInd(ai);
        bef = tmpAi - 6:tmpAi - 1;
        befD = bef(remAbov(bef));
        
        aft = tmpAi + 1:tmpAi + 6;
        aftD = aft(remAbov(aft));
        
        menBlk = mean(tmpVEC([befD , aftD]));
        tmpVEC(tmpAi) = menBlk;
    end
    outSmooth(:,si) = tmpVEC;
    
end

end


